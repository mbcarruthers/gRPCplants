// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: plants.proto

package gRPCplants

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlantServiceClient is the client API for PlantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantServiceClient interface {
	CreatePlant(ctx context.Context, in *Plant, opts ...grpc.CallOption) (*PlantId, error)
	ReadPlant(ctx context.Context, in *PlantId, opts ...grpc.CallOption) (*Plant, error)
	UpdatePlant(ctx context.Context, in *Plant, opts ...grpc.CallOption) (*empty.Empty, error)
	DeletePlant(ctx context.Context, in *PlantId, opts ...grpc.CallOption) (*empty.Empty, error)
	ListPlants(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PlantService_ListPlantsClient, error)
}

type plantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantServiceClient(cc grpc.ClientConnInterface) PlantServiceClient {
	return &plantServiceClient{cc}
}

func (c *plantServiceClient) CreatePlant(ctx context.Context, in *Plant, opts ...grpc.CallOption) (*PlantId, error) {
	out := new(PlantId)
	err := c.cc.Invoke(ctx, "/plants.PlantService/CreatePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantServiceClient) ReadPlant(ctx context.Context, in *PlantId, opts ...grpc.CallOption) (*Plant, error) {
	out := new(Plant)
	err := c.cc.Invoke(ctx, "/plants.PlantService/ReadPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantServiceClient) UpdatePlant(ctx context.Context, in *Plant, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/plants.PlantService/UpdatePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantServiceClient) DeletePlant(ctx context.Context, in *PlantId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/plants.PlantService/DeletePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantServiceClient) ListPlants(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PlantService_ListPlantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlantService_ServiceDesc.Streams[0], "/plants.PlantService/ListPlants", opts...)
	if err != nil {
		return nil, err
	}
	x := &plantServiceListPlantsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlantService_ListPlantsClient interface {
	Recv() (*Plant, error)
	grpc.ClientStream
}

type plantServiceListPlantsClient struct {
	grpc.ClientStream
}

func (x *plantServiceListPlantsClient) Recv() (*Plant, error) {
	m := new(Plant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlantServiceServer is the server API for PlantService service.
// All implementations must embed UnimplementedPlantServiceServer
// for forward compatibility
type PlantServiceServer interface {
	CreatePlant(context.Context, *Plant) (*PlantId, error)
	ReadPlant(context.Context, *PlantId) (*Plant, error)
	UpdatePlant(context.Context, *Plant) (*empty.Empty, error)
	DeletePlant(context.Context, *PlantId) (*empty.Empty, error)
	ListPlants(*empty.Empty, PlantService_ListPlantsServer) error
	mustEmbedUnimplementedPlantServiceServer()
}

// UnimplementedPlantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlantServiceServer struct {
}

func (UnimplementedPlantServiceServer) CreatePlant(context.Context, *Plant) (*PlantId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlant not implemented")
}
func (UnimplementedPlantServiceServer) ReadPlant(context.Context, *PlantId) (*Plant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPlant not implemented")
}
func (UnimplementedPlantServiceServer) UpdatePlant(context.Context, *Plant) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlant not implemented")
}
func (UnimplementedPlantServiceServer) DeletePlant(context.Context, *PlantId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlant not implemented")
}
func (UnimplementedPlantServiceServer) ListPlants(*empty.Empty, PlantService_ListPlantsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPlants not implemented")
}
func (UnimplementedPlantServiceServer) mustEmbedUnimplementedPlantServiceServer() {}

// UnsafePlantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantServiceServer will
// result in compilation errors.
type UnsafePlantServiceServer interface {
	mustEmbedUnimplementedPlantServiceServer()
}

func RegisterPlantServiceServer(s grpc.ServiceRegistrar, srv PlantServiceServer) {
	s.RegisterService(&PlantService_ServiceDesc, srv)
}

func _PlantService_CreatePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantServiceServer).CreatePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantService/CreatePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantServiceServer).CreatePlant(ctx, req.(*Plant))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantService_ReadPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantServiceServer).ReadPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantService/ReadPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantServiceServer).ReadPlant(ctx, req.(*PlantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantService_UpdatePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantServiceServer).UpdatePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantService/UpdatePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantServiceServer).UpdatePlant(ctx, req.(*Plant))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantService_DeletePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantServiceServer).DeletePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plants.PlantService/DeletePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantServiceServer).DeletePlant(ctx, req.(*PlantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantService_ListPlants_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlantServiceServer).ListPlants(m, &plantServiceListPlantsServer{stream})
}

type PlantService_ListPlantsServer interface {
	Send(*Plant) error
	grpc.ServerStream
}

type plantServiceListPlantsServer struct {
	grpc.ServerStream
}

func (x *plantServiceListPlantsServer) Send(m *Plant) error {
	return x.ServerStream.SendMsg(m)
}

// PlantService_ServiceDesc is the grpc.ServiceDesc for PlantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plants.PlantService",
	HandlerType: (*PlantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlant",
			Handler:    _PlantService_CreatePlant_Handler,
		},
		{
			MethodName: "ReadPlant",
			Handler:    _PlantService_ReadPlant_Handler,
		},
		{
			MethodName: "UpdatePlant",
			Handler:    _PlantService_UpdatePlant_Handler,
		},
		{
			MethodName: "DeletePlant",
			Handler:    _PlantService_DeletePlant_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPlants",
			Handler:       _PlantService_ListPlants_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plants.proto",
}
